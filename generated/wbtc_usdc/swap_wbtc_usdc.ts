// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedCoverToSwap extends ethereum.Event {
  get params(): AddedCoverToSwap__Params {
    return new AddedCoverToSwap__Params(this);
  }
}

export class AddedCoverToSwap__Params {
  _event: AddedCoverToSwap;

  constructor(event: AddedCoverToSwap) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newCoverX100(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newThreshold(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get addedCoverTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ClosedSwap extends ethereum.Event {
  get params(): ClosedSwap__Params {
    return new ClosedSwap__Params(this);
  }
}

export class ClosedSwap__Params {
  _event: ClosedSwap;

  constructor(event: ClosedSwap) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get profit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get remainingCover(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get closingTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get expirePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CreatedSwap extends ethereum.Event {
  get params(): CreatedSwap__Params {
    return new CreatedSwap__Params(this);
  }
}

export class CreatedSwap__Params {
  _event: CreatedSwap;

  constructor(event: CreatedSwap) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get swapType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get threshold(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get executionTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get creationBlock(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DecommissionSC extends ethereum.Event {
  get params(): DecommissionSC__Params {
    return new DecommissionSC__Params(this);
  }
}

export class DecommissionSC__Params {
  _event: DecommissionSC;

  constructor(event: DecommissionSC) {
    this._event = event;
  }

  get decommissionAsset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get decommissionBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get decommissionBeneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ExecutedSwap extends ethereum.Event {
  get params(): ExecutedSwap__Params {
    return new ExecutedSwap__Params(this);
  }
}

export class ExecutedSwap__Params {
  _event: ExecutedSwap;

  constructor(event: ExecutedSwap) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get profit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get remainingCover(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get expirePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class FinalizeContract extends ethereum.Event {
  get params(): FinalizeContract__Params {
    return new FinalizeContract__Params(this);
  }
}

export class FinalizeContract__Params {
  _event: FinalizeContract;

  constructor(event: FinalizeContract) {
    this._event = event;
  }

  get _marginFactorAsset(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _marginFactorCurrency(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _settlementFeeContainer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _premiumAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _governanceTokenRewardTreasury(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get _rateReward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _descriptionTOU(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class LiquidatedSwap extends ethereum.Event {
  get params(): LiquidatedSwap__Params {
    return new LiquidatedSwap__Params(this);
  }
}

export class LiquidatedSwap__Params {
  _event: LiquidatedSwap;

  constructor(event: LiquidatedSwap) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get liquidationTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMainSwapParameters extends ethereum.Event {
  get params(): SetMainSwapParameters__Params {
    return new SetMainSwapParameters__Params(this);
  }
}

export class SetMainSwapParameters__Params {
  _event: SetMainSwapParameters;

  constructor(event: SetMainSwapParameters) {
    this._event = event;
  }

  get _governanceToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _governanceTokenRewardTreasury(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _settlementFeePerc(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _settlementFeeContainer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _PRICE_DECIMALS(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _priceProvider(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get rateReward(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get _rateRewardOP(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get _newRewardManager(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get _financialSwapManage(): Address {
    return this._event.parameters[9].value.toAddress();
  }

  get _descriptionTOU(): string {
    return this._event.parameters[10].value.toString();
  }
}

export class SetOperatingAllowance extends ethereum.Event {
  get params(): SetOperatingAllowance__Params {
    return new SetOperatingAllowance__Params(this);
  }
}

export class SetOperatingAllowance__Params {
  _event: SetOperatingAllowance;

  constructor(event: SetOperatingAllowance) {
    this._event = event;
  }

  get poolCurrency(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolAsset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get settlementFeeManager(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get premiumAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class SetPriceProvider extends ethereum.Event {
  get params(): SetPriceProvider__Params {
    return new SetPriceProvider__Params(this);
  }
}

export class SetPriceProvider__Params {
  _event: SetPriceProvider;

  constructor(event: SetPriceProvider) {
    this._event = event;
  }

  get priceProvider(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetStateSC extends ethereum.Event {
  get params(): SetStateSC__Params {
    return new SetStateSC__Params(this);
  }
}

export class SetStateSC__Params {
  _event: SetStateSC;

  constructor(event: SetStateSC) {
    this._event = event;
  }

  get state(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SetSwapSafetyParameters extends ethereum.Event {
  get params(): SetSwapSafetyParameters__Params {
    return new SetSwapSafetyParameters__Params(this);
  }
}

export class SetSwapSafetyParameters__Params {
  _event: SetSwapSafetyParameters;

  constructor(event: SetSwapSafetyParameters) {
    this._event = event;
  }

  get _minTimeSwap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _limitActive(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get _limitSwap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get coverX100Min(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get targetSizeAsset(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get targetSizeMinCurrency(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _safetyMarginX100(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get _marginFactorAsset(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get _marginFactorCurrency(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class TransferGovernance extends ethereum.Event {
  get params(): TransferGovernance__Params {
    return new TransferGovernance__Params(this);
  }
}

export class TransferGovernance__Params {
  _event: TransferGovernance;

  constructor(event: TransferGovernance) {
    this._event = event;
  }

  get newGovernace(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class swap_wbtc_usdc__calcProfitLossResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getProfit(): BigInt {
    return this.value0;
  }

  getLoss(): BigInt {
    return this.value1;
  }
}

export class swap_wbtc_usdc__getSwapAvgsAndPoolAvailabilitiesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getAvgAsset(): BigInt {
    return this.value0;
  }

  getAvgCurrency(): BigInt {
    return this.value1;
  }

  getPoolAssetAvailability(): BigInt {
    return this.value2;
  }

  getPoolCurrencyAvailability(): BigInt {
    return this.value3;
  }
}

export class swap_wbtc_usdc__getSwapFeesAndRewardResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFees(): BigInt {
    return this.value0;
  }

  getReward(): BigInt {
    return this.value1;
  }
}

export class swap_wbtc_usdc__swapsResult {
  value0: i32;
  value1: i32;
  value2: Address;
  value3: i32;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: Address,
    value3: i32,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getSwapType(): i32 {
    return this.value0;
  }

  getState(): i32 {
    return this.value1;
  }

  getHolder(): Address {
    return this.value2;
  }

  getCoverX100(): i32 {
    return this.value3;
  }

  getInitPrice(): BigInt {
    return this.value4;
  }

  getTargetSize(): BigInt {
    return this.value5;
  }

  getThreshold(): BigInt {
    return this.value6;
  }

  getPeriodFee(): BigInt {
    return this.value7;
  }

  getInitTime(): BigInt {
    return this.value8;
  }

  getExecutionTime(): BigInt {
    return this.value9;
  }

  getRewardAmount(): BigInt {
    return this.value10;
  }

  getRewardOP(): BigInt {
    return this.value11;
  }
}

export class swap_wbtc_usdc extends ethereum.SmartContract {
  static bind(address: Address): swap_wbtc_usdc {
    return new swap_wbtc_usdc("swap_wbtc_usdc", address);
  }

  PRICE_DECIMALS(): BigInt {
    let result = super.call("PRICE_DECIMALS", "PRICE_DECIMALS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRICE_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_DECIMALS",
      "PRICE_DECIMALS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetDecimals(): BigInt {
    let result = super.call("assetDecimals", "assetDecimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_assetDecimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetDecimals",
      "assetDecimals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcCoverToAdd(
    targetSize: BigInt,
    coverX100: BigInt,
    newCoverX100: BigInt
  ): BigInt {
    let result = super.call(
      "calcCoverToAdd",
      "calcCoverToAdd(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(targetSize),
        ethereum.Value.fromUnsignedBigInt(coverX100),
        ethereum.Value.fromUnsignedBigInt(newCoverX100)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcCoverToAdd(
    targetSize: BigInt,
    coverX100: BigInt,
    newCoverX100: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcCoverToAdd",
      "calcCoverToAdd(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(targetSize),
        ethereum.Value.fromUnsignedBigInt(coverX100),
        ethereum.Value.fromUnsignedBigInt(newCoverX100)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcPenalties(
    swapType: i32,
    targetSize: BigInt,
    profit: BigInt,
    loss: BigInt,
    cover: BigInt,
    executionTime: BigInt,
    currentPrice: BigInt
  ): BigInt {
    let result = super.call(
      "calcPenalties",
      "calcPenalties(uint8,uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType)),
        ethereum.Value.fromUnsignedBigInt(targetSize),
        ethereum.Value.fromUnsignedBigInt(profit),
        ethereum.Value.fromUnsignedBigInt(loss),
        ethereum.Value.fromUnsignedBigInt(cover),
        ethereum.Value.fromUnsignedBigInt(executionTime),
        ethereum.Value.fromUnsignedBigInt(currentPrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcPenalties(
    swapType: i32,
    targetSize: BigInt,
    profit: BigInt,
    loss: BigInt,
    cover: BigInt,
    executionTime: BigInt,
    currentPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcPenalties",
      "calcPenalties(uint8,uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType)),
        ethereum.Value.fromUnsignedBigInt(targetSize),
        ethereum.Value.fromUnsignedBigInt(profit),
        ethereum.Value.fromUnsignedBigInt(loss),
        ethereum.Value.fromUnsignedBigInt(cover),
        ethereum.Value.fromUnsignedBigInt(executionTime),
        ethereum.Value.fromUnsignedBigInt(currentPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcProfitLoss(
    swapType: i32,
    currentPrice: BigInt,
    initPrice: BigInt,
    targetSize: BigInt
  ): swap_wbtc_usdc__calcProfitLossResult {
    let result = super.call(
      "calcProfitLoss",
      "calcProfitLoss(uint8,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType)),
        ethereum.Value.fromUnsignedBigInt(currentPrice),
        ethereum.Value.fromUnsignedBigInt(initPrice),
        ethereum.Value.fromUnsignedBigInt(targetSize)
      ]
    );

    return new swap_wbtc_usdc__calcProfitLossResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_calcProfitLoss(
    swapType: i32,
    currentPrice: BigInt,
    initPrice: BigInt,
    targetSize: BigInt
  ): ethereum.CallResult<swap_wbtc_usdc__calcProfitLossResult> {
    let result = super.tryCall(
      "calcProfitLoss",
      "calcProfitLoss(uint8,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType)),
        ethereum.Value.fromUnsignedBigInt(currentPrice),
        ethereum.Value.fromUnsignedBigInt(initPrice),
        ethereum.Value.fromUnsignedBigInt(targetSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new swap_wbtc_usdc__calcProfitLossResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  calcRewardPenalties(
    rewardAmount: BigInt,
    initTime: BigInt,
    executionTime: BigInt
  ): BigInt {
    let result = super.call(
      "calcRewardPenalties",
      "calcRewardPenalties(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(rewardAmount),
        ethereum.Value.fromUnsignedBigInt(initTime),
        ethereum.Value.fromUnsignedBigInt(executionTime)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcRewardPenalties(
    rewardAmount: BigInt,
    initTime: BigInt,
    executionTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcRewardPenalties",
      "calcRewardPenalties(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(rewardAmount),
        ethereum.Value.fromUnsignedBigInt(initTime),
        ethereum.Value.fromUnsignedBigInt(executionTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractCreationTimestamp(): BigInt {
    let result = super.call(
      "contractCreationTimestamp",
      "contractCreationTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractCreationTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractCreationTimestamp",
      "contractCreationTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coverX100Min(): BigInt {
    let result = super.call("coverX100Min", "coverX100Min():(uint256)", []);

    return result[0].toBigInt();
  }

  try_coverX100Min(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("coverX100Min", "coverX100Min():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currencyDecimals(): BigInt {
    let result = super.call(
      "currencyDecimals",
      "currencyDecimals():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currencyDecimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currencyDecimals",
      "currencyDecimals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  descriptionTOU(): string {
    let result = super.call("descriptionTOU", "descriptionTOU():(string)", []);

    return result[0].toString();
  }

  try_descriptionTOU(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "descriptionTOU",
      "descriptionTOU():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  erc20Asset(): Address {
    let result = super.call("erc20Asset", "erc20Asset():(address)", []);

    return result[0].toAddress();
  }

  try_erc20Asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("erc20Asset", "erc20Asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  erc20Currency(): Address {
    let result = super.call("erc20Currency", "erc20Currency():(address)", []);

    return result[0].toAddress();
  }

  try_erc20Currency(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "erc20Currency",
      "erc20Currency():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  financialSwapManager(): Address {
    let result = super.call(
      "financialSwapManager",
      "financialSwapManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_financialSwapManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "financialSwapManager",
      "financialSwapManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  formatAmount(
    _inputAmount: BigInt,
    _nrOfDecimalsIn: BigInt,
    _nrOfDecimalsOut: BigInt
  ): BigInt {
    let result = super.call(
      "formatAmount",
      "formatAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_inputAmount),
        ethereum.Value.fromUnsignedBigInt(_nrOfDecimalsIn),
        ethereum.Value.fromUnsignedBigInt(_nrOfDecimalsOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_formatAmount(
    _inputAmount: BigInt,
    _nrOfDecimalsIn: BigInt,
    _nrOfDecimalsOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "formatAmount",
      "formatAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_inputAmount),
        ethereum.Value.fromUnsignedBigInt(_nrOfDecimalsIn),
        ethereum.Value.fromUnsignedBigInt(_nrOfDecimalsOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNrOfSwaps(): BigInt {
    let result = super.call("getNrOfSwaps", "getNrOfSwaps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNrOfSwaps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNrOfSwaps", "getNrOfSwaps():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(): BigInt {
    let result = super.call("getPrice", "getPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReward(periodFee: BigInt, swapType: i32): BigInt {
    let result = super.call("getReward", "getReward(uint256,uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(periodFee),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType))
    ]);

    return result[0].toBigInt();
  }

  try_getReward(periodFee: BigInt, swapType: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReward",
      "getReward(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(periodFee),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardOP(periodFee: BigInt, swapType: i32): BigInt {
    let result = super.call(
      "getRewardOP",
      "getRewardOP(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(periodFee),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType))
      ]
    );

    return result[0].toBigInt();
  }

  try_getRewardOP(
    periodFee: BigInt,
    swapType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardOP",
      "getRewardOP(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(periodFee),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapAvgsAndPoolAvailabilities(): swap_wbtc_usdc__getSwapAvgsAndPoolAvailabilitiesResult {
    let result = super.call(
      "getSwapAvgsAndPoolAvailabilities",
      "getSwapAvgsAndPoolAvailabilities():(uint256,uint256,uint256,uint256)",
      []
    );

    return new swap_wbtc_usdc__getSwapAvgsAndPoolAvailabilitiesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getSwapAvgsAndPoolAvailabilities(): ethereum.CallResult<
    swap_wbtc_usdc__getSwapAvgsAndPoolAvailabilitiesResult
  > {
    let result = super.tryCall(
      "getSwapAvgsAndPoolAvailabilities",
      "getSwapAvgsAndPoolAvailabilities():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new swap_wbtc_usdc__getSwapAvgsAndPoolAvailabilitiesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getSwapFeesAndReward(
    period: BigInt,
    targetSize: BigInt,
    swapType: i32
  ): swap_wbtc_usdc__getSwapFeesAndRewardResult {
    let result = super.call(
      "getSwapFeesAndReward",
      "getSwapFeesAndReward(uint256,uint256,uint8):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(targetSize),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType))
      ]
    );

    return new swap_wbtc_usdc__getSwapFeesAndRewardResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getSwapFeesAndReward(
    period: BigInt,
    targetSize: BigInt,
    swapType: i32
  ): ethereum.CallResult<swap_wbtc_usdc__getSwapFeesAndRewardResult> {
    let result = super.tryCall(
      "getSwapFeesAndReward",
      "getSwapFeesAndReward(uint256,uint256,uint8):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(period),
        ethereum.Value.fromUnsignedBigInt(targetSize),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new swap_wbtc_usdc__getSwapFeesAndRewardResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTotalToSpend(
    settlementFee: BigInt,
    periodFee: BigInt,
    cover: BigInt
  ): BigInt {
    let result = super.call(
      "getTotalToSpend",
      "getTotalToSpend(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(settlementFee),
        ethereum.Value.fromUnsignedBigInt(periodFee),
        ethereum.Value.fromUnsignedBigInt(cover)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalToSpend(
    settlementFee: BigInt,
    periodFee: BigInt,
    cover: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalToSpend",
      "getTotalToSpend(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(settlementFee),
        ethereum.Value.fromUnsignedBigInt(periodFee),
        ethereum.Value.fromUnsignedBigInt(cover)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governanceToken(): Address {
    let result = super.call(
      "governanceToken",
      "governanceToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_governanceToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "governanceToken",
      "governanceToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governanceTokenRewardTreasury(): Address {
    let result = super.call(
      "governanceTokenRewardTreasury",
      "governanceTokenRewardTreasury():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_governanceTokenRewardTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "governanceTokenRewardTreasury",
      "governanceTokenRewardTreasury():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  limitActive(): boolean {
    let result = super.call("limitActive", "limitActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_limitActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("limitActive", "limitActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  limitSwap(): BigInt {
    let result = super.call("limitSwap", "limitSwap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_limitSwap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("limitSwap", "limitSwap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marginFactorAsset(): BigInt {
    let result = super.call(
      "marginFactorAsset",
      "marginFactorAsset():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_marginFactorAsset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marginFactorAsset",
      "marginFactorAsset():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marginFactorCurrency(): BigInt {
    let result = super.call(
      "marginFactorCurrency",
      "marginFactorCurrency():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_marginFactorCurrency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marginFactorCurrency",
      "marginFactorCurrency():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minTimeSwap(): BigInt {
    let result = super.call("minTimeSwap", "minTimeSwap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minTimeSwap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minTimeSwap", "minTimeSwap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mult6(): BigInt {
    let result = super.call("mult6", "mult6():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mult6(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mult6", "mult6():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolAsset(): Address {
    let result = super.call("poolAsset", "poolAsset():(address)", []);

    return result[0].toAddress();
  }

  try_poolAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolAsset", "poolAsset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolCurrency(): Address {
    let result = super.call("poolCurrency", "poolCurrency():(address)", []);

    return result[0].toAddress();
  }

  try_poolCurrency(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolCurrency", "poolCurrency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  premiumAddress(): Address {
    let result = super.call("premiumAddress", "premiumAddress():(address)", []);

    return result[0].toAddress();
  }

  try_premiumAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "premiumAddress",
      "premiumAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceProvider(): Address {
    let result = super.call("priceProvider", "priceProvider():(address)", []);

    return result[0].toAddress();
  }

  try_priceProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "priceProvider",
      "priceProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rateReward(): BigInt {
    let result = super.call("rateReward", "rateReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rateReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rateReward", "rateReward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateRewardOP(): BigInt {
    let result = super.call("rateRewardOP", "rateRewardOP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rateRewardOP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rateRewardOP", "rateRewardOP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardManager(): Address {
    let result = super.call("rewardManager", "rewardManager():(address)", []);

    return result[0].toAddress();
  }

  try_rewardManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardManager",
      "rewardManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  safetyMarginX100(): i32 {
    let result = super.call(
      "safetyMarginX100",
      "safetyMarginX100():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_safetyMarginX100(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "safetyMarginX100",
      "safetyMarginX100():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  settlementFeeManager(): Address {
    let result = super.call(
      "settlementFeeManager",
      "settlementFeeManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_settlementFeeManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "settlementFeeManager",
      "settlementFeeManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settlementFeePerc(): BigInt {
    let result = super.call(
      "settlementFeePerc",
      "settlementFeePerc():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_settlementFeePerc(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settlementFeePerc",
      "settlementFeePerc():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapAvgAsset(): BigInt {
    let result = super.call("swapAvgAsset", "swapAvgAsset():(uint256)", []);

    return result[0].toBigInt();
  }

  try_swapAvgAsset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("swapAvgAsset", "swapAvgAsset():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapAvgCurrency(): BigInt {
    let result = super.call(
      "swapAvgCurrency",
      "swapAvgCurrency():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_swapAvgCurrency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapAvgCurrency",
      "swapAvgCurrency():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swaps(param0: BigInt): swap_wbtc_usdc__swapsResult {
    let result = super.call(
      "swaps",
      "swaps(uint256):(uint8,uint8,address,uint16,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new swap_wbtc_usdc__swapsResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt()
    );
  }

  try_swaps(param0: BigInt): ethereum.CallResult<swap_wbtc_usdc__swapsResult> {
    let result = super.tryCall(
      "swaps",
      "swaps(uint256):(uint8,uint8,address,uint16,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new swap_wbtc_usdc__swapsResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt()
      )
    );
  }

  swapsByUser(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "swapsByUser",
      "swapsByUser(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapsByUser(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapsByUser",
      "swapsByUser(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  targetSizeMinAsset(): BigInt {
    let result = super.call(
      "targetSizeMinAsset",
      "targetSizeMinAsset():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_targetSizeMinAsset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetSizeMinAsset",
      "targetSizeMinAsset():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  targetSizeMinCurrency(): BigInt {
    let result = super.call(
      "targetSizeMinCurrency",
      "targetSizeMinCurrency():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_targetSizeMinCurrency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetSizeMinCurrency",
      "targetSizeMinCurrency():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifySwapPermission(targetSize: BigInt, swapDirection: i32): boolean {
    let result = super.call(
      "verifySwapPermission",
      "verifySwapPermission(uint256,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(targetSize),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapDirection))
      ]
    );

    return result[0].toBoolean();
  }

  try_verifySwapPermission(
    targetSize: BigInt,
    swapDirection: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifySwapPermission",
      "verifySwapPermission(uint256,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(targetSize),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(swapDirection))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _erc20Asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _poolAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nrOfAssetDecimals(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _erc20Currency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _poolCurrency(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _nrOfCurrencyDecimals(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get pp(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _governanceToken(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get governanceAddr(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _financialSwapManager(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCoverCall extends ethereum.Call {
  get inputs(): AddCoverCall__Inputs {
    return new AddCoverCall__Inputs(this);
  }

  get outputs(): AddCoverCall__Outputs {
    return new AddCoverCall__Outputs(this);
  }
}

export class AddCoverCall__Inputs {
  _call: AddCoverCall;

  constructor(call: AddCoverCall) {
    this._call = call;
  }

  get swapID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newCoverX100(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class AddCoverCall__Outputs {
  _call: AddCoverCall;

  constructor(call: AddCoverCall) {
    this._call = call;
  }
}

export class CloseSwapCall extends ethereum.Call {
  get inputs(): CloseSwapCall__Inputs {
    return new CloseSwapCall__Inputs(this);
  }

  get outputs(): CloseSwapCall__Outputs {
    return new CloseSwapCall__Outputs(this);
  }
}

export class CloseSwapCall__Inputs {
  _call: CloseSwapCall;

  constructor(call: CloseSwapCall) {
    this._call = call;
  }

  get swapID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseSwapCall__Outputs {
  _call: CloseSwapCall;

  constructor(call: CloseSwapCall) {
    this._call = call;
  }
}

export class CreateSwapCall extends ethereum.Call {
  get inputs(): CreateSwapCall__Inputs {
    return new CreateSwapCall__Inputs(this);
  }

  get outputs(): CreateSwapCall__Outputs {
    return new CreateSwapCall__Outputs(this);
  }
}

export class CreateSwapCall__Inputs {
  _call: CreateSwapCall;

  constructor(call: CreateSwapCall) {
    this._call = call;
  }

  get period(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get targetSize(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get coverX100(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get swapType(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreateSwapCall__Outputs {
  _call: CreateSwapCall;

  constructor(call: CreateSwapCall) {
    this._call = call;
  }

  get swapID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DecommissionSCCall extends ethereum.Call {
  get inputs(): DecommissionSCCall__Inputs {
    return new DecommissionSCCall__Inputs(this);
  }

  get outputs(): DecommissionSCCall__Outputs {
    return new DecommissionSCCall__Outputs(this);
  }
}

export class DecommissionSCCall__Inputs {
  _call: DecommissionSCCall;

  constructor(call: DecommissionSCCall) {
    this._call = call;
  }

  get assetsToWithdraw(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class DecommissionSCCall__Outputs {
  _call: DecommissionSCCall;

  constructor(call: DecommissionSCCall) {
    this._call = call;
  }
}

export class ExecuteSwapCall extends ethereum.Call {
  get inputs(): ExecuteSwapCall__Inputs {
    return new ExecuteSwapCall__Inputs(this);
  }

  get outputs(): ExecuteSwapCall__Outputs {
    return new ExecuteSwapCall__Outputs(this);
  }
}

export class ExecuteSwapCall__Inputs {
  _call: ExecuteSwapCall;

  constructor(call: ExecuteSwapCall) {
    this._call = call;
  }

  get swapID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteSwapCall__Outputs {
  _call: ExecuteSwapCall;

  constructor(call: ExecuteSwapCall) {
    this._call = call;
  }
}

export class FinalizeContractCall extends ethereum.Call {
  get inputs(): FinalizeContractCall__Inputs {
    return new FinalizeContractCall__Inputs(this);
  }

  get outputs(): FinalizeContractCall__Outputs {
    return new FinalizeContractCall__Outputs(this);
  }
}

export class FinalizeContractCall__Inputs {
  _call: FinalizeContractCall;

  constructor(call: FinalizeContractCall) {
    this._call = call;
  }

  get _marginFactorAsset(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _marginFactorCurrency(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _settlementFeeContainer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rewardManager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _premiumAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _governanceTokenRewardTreasury(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _rateReward(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _descriptionTOU(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class FinalizeContractCall__Outputs {
  _call: FinalizeContractCall;

  constructor(call: FinalizeContractCall) {
    this._call = call;
  }
}

export class MarginCallCall extends ethereum.Call {
  get inputs(): MarginCallCall__Inputs {
    return new MarginCallCall__Inputs(this);
  }

  get outputs(): MarginCallCall__Outputs {
    return new MarginCallCall__Outputs(this);
  }
}

export class MarginCallCall__Inputs {
  _call: MarginCallCall;

  constructor(call: MarginCallCall) {
    this._call = call;
  }

  get swapID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MarginCallCall__Outputs {
  _call: MarginCallCall;

  constructor(call: MarginCallCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMainSwapParametersCall extends ethereum.Call {
  get inputs(): SetMainSwapParametersCall__Inputs {
    return new SetMainSwapParametersCall__Inputs(this);
  }

  get outputs(): SetMainSwapParametersCall__Outputs {
    return new SetMainSwapParametersCall__Outputs(this);
  }
}

export class SetMainSwapParametersCall__Inputs {
  _call: SetMainSwapParametersCall;

  constructor(call: SetMainSwapParametersCall) {
    this._call = call;
  }

  get _governanceToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _governanceTokenRewardTreasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _settlementFeePerc(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _settlementFeeContainer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _PRICE_DECIMALS(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _priceProvider(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _rateReward(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _rateRewardOP(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _newRewardManager(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _financialSwapManager(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _descriptionTOU(): string {
    return this._call.inputValues[10].value.toString();
  }
}

export class SetMainSwapParametersCall__Outputs {
  _call: SetMainSwapParametersCall;

  constructor(call: SetMainSwapParametersCall) {
    this._call = call;
  }
}

export class SetOperatingAllowanceCall extends ethereum.Call {
  get inputs(): SetOperatingAllowanceCall__Inputs {
    return new SetOperatingAllowanceCall__Inputs(this);
  }

  get outputs(): SetOperatingAllowanceCall__Outputs {
    return new SetOperatingAllowanceCall__Outputs(this);
  }
}

export class SetOperatingAllowanceCall__Inputs {
  _call: SetOperatingAllowanceCall;

  constructor(call: SetOperatingAllowanceCall) {
    this._call = call;
  }
}

export class SetOperatingAllowanceCall__Outputs {
  _call: SetOperatingAllowanceCall;

  constructor(call: SetOperatingAllowanceCall) {
    this._call = call;
  }
}

export class SetPriceProviderCall extends ethereum.Call {
  get inputs(): SetPriceProviderCall__Inputs {
    return new SetPriceProviderCall__Inputs(this);
  }

  get outputs(): SetPriceProviderCall__Outputs {
    return new SetPriceProviderCall__Outputs(this);
  }
}

export class SetPriceProviderCall__Inputs {
  _call: SetPriceProviderCall;

  constructor(call: SetPriceProviderCall) {
    this._call = call;
  }

  get _priceProvider(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPriceProviderCall__Outputs {
  _call: SetPriceProviderCall;

  constructor(call: SetPriceProviderCall) {
    this._call = call;
  }
}

export class SetStateSCCall extends ethereum.Call {
  get inputs(): SetStateSCCall__Inputs {
    return new SetStateSCCall__Inputs(this);
  }

  get outputs(): SetStateSCCall__Outputs {
    return new SetStateSCCall__Outputs(this);
  }
}

export class SetStateSCCall__Inputs {
  _call: SetStateSCCall;

  constructor(call: SetStateSCCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetStateSCCall__Outputs {
  _call: SetStateSCCall;

  constructor(call: SetStateSCCall) {
    this._call = call;
  }
}

export class SetSwapSafetyParametersCall extends ethereum.Call {
  get inputs(): SetSwapSafetyParametersCall__Inputs {
    return new SetSwapSafetyParametersCall__Inputs(this);
  }

  get outputs(): SetSwapSafetyParametersCall__Outputs {
    return new SetSwapSafetyParametersCall__Outputs(this);
  }
}

export class SetSwapSafetyParametersCall__Inputs {
  _call: SetSwapSafetyParametersCall;

  constructor(call: SetSwapSafetyParametersCall) {
    this._call = call;
  }

  get _minTimeSwap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _limitActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _limitSwap(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _coverX100Min(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _targetSizeMinAsset(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _targetSizeMinCurrency(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _safetyMarginX100(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _marginFactorAsset(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _marginFactorCurrency(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class SetSwapSafetyParametersCall__Outputs {
  _call: SetSwapSafetyParametersCall;

  constructor(call: SetSwapSafetyParametersCall) {
    this._call = call;
  }
}

export class TransferGovernanceCall extends ethereum.Call {
  get inputs(): TransferGovernanceCall__Inputs {
    return new TransferGovernanceCall__Inputs(this);
  }

  get outputs(): TransferGovernanceCall__Outputs {
    return new TransferGovernanceCall__Outputs(this);
  }
}

export class TransferGovernanceCall__Inputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferGovernanceCall__Outputs {
  _call: TransferGovernanceCall;

  constructor(call: TransferGovernanceCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
